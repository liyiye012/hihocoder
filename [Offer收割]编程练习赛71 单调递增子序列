//#include<iostream>
//#include<vector>
//#include<string>
//#include<stack>
//#include<queue>
//#include<algorithm>
//#include<cstdio>
//#include<set>
//using namespace std;
//void output(vector<int> T) {
//    cout << "所有的子数组为" << endl;
//    for (int i = 0; i < T.size(); i++) {
//        cout << T[i] << " ";
//
//    }cout << endl;
//}
//bool check(vector<int> A, int start, int end, int K) {
//    bool is = true;
//    for (int i = start; i <= end - 1; i++) {
//        for (int j = i + 1; j <= end; j++) {
//            if ((A[i] + A[j]) % K != 0) is = false;
//        }
//    }
//    return is;
//}
//int binarySearch(vector<int> A, int len, int x) {
//    int left = 0, right = len - 1, mid = (left + right) / 2;
//    while (left <= right) {
//        if (x > A[mid]) left = mid + 1;
//        else if (x < A[mid]) right = mid - 1;
//        else return mid;
//        mid = (left + right) / 2;
//    }
//    return left;
//}
//int maxsublen(vector<int> A, int N) {
//    vector<int> maxL(N, 0);
//    vector<int> mem(N, 0);
//    maxL[0] = A[0];
//    int len = 1;
//    for (int i = 1; i < N; i++) {
//        int j = binarySearch(maxL, len, A[i]);
//        maxL[j] = A[i];
//        mem[i] = j;
//        if (++j > len) len = j;
//    }
//    return len;
//}
//int greed(vector<int> A, int n) {
//    vector<int> g(n+1, 0);
//    vector<int> f(n+1, 0);
//    vector<int> a(n + 1, 0);
//    for (int i = 1; i <= n; i++) {
//        a[i] = A[i - 1];
//    }
//    set<pair<int,int>> s;
//    g[1] = 1;
//    for (int i = 2; i <= n; i++) {
//        if (a[i] > a[i - 1]) g[i] = g[i - 1] + 1;
//        else g[i] = 1;
//    }
//    f[n] = 1;
//    for (int i = n - 1; i >= 1; i--) {
//        if (a[i] < a[i + 1]) f[i] = f[i + 1] + 1;
//        else f[i] = 1;
//    }
//
//    s.clear();
//    s.insert(make_pair(a[1], g[1]));
//    int ans = 1;
//    for (int i = 2; i <= n; i++) {
//        pair<int, int> c = make_pair(a[i], g[i]);
//        set<pair<int, int>>::iterator it = s.lower_bound(c);
//        bool keep = true;
//        if (it != s.begin()) {
//            pair<int, int> last = *(--it);
//            int len = f[i] + last.second;
//            ans = max(ans, len);
//            if (last.second >= c.second) keep = false;
//        }
//
//        if (keep) {
//            s.erase(c);
//            s.insert(c);
//            it = s.find(c);
//            it++;
//            while (it != s.end() && it->first > c.first && it->second <= c.second) s.erase(it++);
//        }
//    }
//    return ans;
//}
//int main(void) {
//    //freopen("in.txt","r",stdin);
//    //freopen("out.txt","w",stdout);
//    int N;
//    cin >> N ;
//    int temp;
//    vector<int> A;
//    for (int i = 0; i < N; i++) {
//        cin >> temp;
//        A.push_back(temp);
//    }
//    //int numdelete = N - maxsublen(A, N);
//    //cout << numdelete;
//    int numdelete = N - greed(A, N);
//    cout << numdelete;
//    return 0;
//}
#include <stdio.h>
#include <vector>
#include <algorithm>

void solve()
{
    int N;
    scanf("%d", &N);
    std::vector<int> nums(N, 0);
    for (int i = 0; i < N; i++)
    {
        scanf("%d", &nums[i]);
    }
    if (N == 1)
    {
        printf("%d\n", 0);
        return;
    }
    int i = 0;
    for (; i < N - 1; i++)
    {
        if (nums[i] > nums[i + 1])//从第i+1个元素开始数组不再单调递增
        {
            break;
        }
    }
    int j = N - 1;
    for (; j > 0; j--)
    {
        if (nums[j] < nums[j - 1])//从右到左第j-1个元素起数组递增性被打破
        {
            break;
        }
    }
    if (i >= j) //数组一直是递增的
    {
        printf("%d\n", 0);
        return;
    }
    int res = std::min(N - i - 1, j);//在删掉右边序列和删掉左边序列做选择
    for (int k = 0; k <= i; k++)
    {
        while (j < N && nums[j] < nums[k])//删掉中间序列，但要保证左右两边序列能连接上
        {
            j++;
        }
        res = std::min(res, j - k - 1);
    }
    printf("%d\n", res);
}

int main()
{
    solve();
    return 0;
}
