//My solution failed
//#include<iostream>
//#include<vector>
//#include<string>
//#include<stack>
//#include<queue>
//#include<algorithm>
//using namespace std;
//void output(vector<int> T) {
//    cout << "所有的子数组为" << endl;
//    for (int i = 0; i < T.size(); i++) {
//            cout << T[i] << " ";
//        
//    }cout << endl;
//}
//bool check(vector<int> A,int start,int end,int K) {
//    bool is = true;
//    for (int i = start; i <= end-1; i++) {
//        for (int j = i + 1; j <= end; j++) {
//            if ((A[i] + A[j]) % K != 0) is = false;
//        }
//    }
//    return is;
//}
//int main(void) {
//    //freopen("in.txt","r",stdin);
//    //freopen("out.txt","w",stdout);
//    int N,K;
//    cin >> N>>K;
//    int temp;
//    vector<int> A;
//    for (int i = 0; i < N; i++) {
//        cin >> temp;
//        A.push_back(temp);
//    }
//    int maxlen = -1;
//    for (int i = 0; i < N; i++) {
//        int localmax = 0;
//        for (int j = 1; j < N - i; j++) {
//            if (check(A, i, i + j, K)) localmax = j + 1;
//            maxlen = max(maxlen, localmax);
//        }
//    }
//    cout << maxlen;
//    return 0;
//}
//Number 1 solution
//#include <iostream>
//#include <string>
//#include <stdio.h>
//#include <string.h>
//#include <vector>
//#include <ctime>
//#include <set>
//#include <map>
//#include <unordered_map>
//#include <queue>
//#include <algorithm>
//#include <cmath>
//#include <assert.h>
//using namespace std;
//#define vi vector<int>
//#define pii pair<int,int>
//#define x first
//#define y second
//#define all(x) x.begin(),x.end()
//#define pb push_back
//#define mp make_pair
//#define SZ(x) x.size()
//#define rep(i,a,b) for(int i=a;i<b;i++)
//#define per(i,a,b) for(int i=b-1;i>=a;i--)
//#define pi acos(-1)
//#define mod 1000000007
//#define inf 1000000007
//#define ll long long
//#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
//#define N 1000010
//#define _DEBUG
//template <class U, class T> void Max(U &x, T y) { if (x<y)x = y; }
//template <class U, class T> void Min(U &x, T y) { if (x>y)x = y; }
//template <class T> void add(int &a, T b) { a = (a + b) % mod; }
//
//int pow(int a, int b) {
//    int ans = 1;
//    while (b) {
//        if (b & 1)ans = 1LL * ans*a%mod;
//        a = 1LL * a*a%mod; b >>= 1;
//    }
//    return ans;
//}
//
//int pow(int a, int b, int c) {
//    int ans = 1;
//    while (b) {
//        if (b & 1)ans = 1LL * ans*a%c;
//        a = 1LL * a*a%c; b >>= 1;
//    }
//    return ans;
//}
//
//
//int main() {
//    //cout<<setprecision(6)<<fixed;
//    clock_t start = clock();
//    int ca = 0, T, k, i, j, n, m, K;
//    scanf("%d%d", &n, &K);
//    int a = 0, b = 0, x = -1;
//    if (K % 2 == 0)x = K / 2;
//    map<int, int>vis;
//    rep(i, 0, n) {
//        scanf("%d", &k), k %= K;
//        if (k == 0)a++;
//        else if (k == x)b++;
//        else vis[k] = 1;
//    }
//    int ans = max(a, b);
//    if (ans<2)
//        rep(i, 1, (K + 1) / 2)if (vis.count(i) && vis.count(K - i)) { ans = 2; break; }
//    if (ans<2)ans = -1; //子数组长度小于2，不存在输出-1
//    printf("%d\n", ans);
//}
#include <stdio.h>
#include <set>
#include <algorithm>
#include<iostream>
using namespace std;
int N;
int A[100005];
int K;
//理解：
//此题中的子数组不必连续，为了找到最大的子数组长度，有以下几种情况：
//1.找到的元素都是K的倍数
//2.找到的元素均有互补元素或者模都是K的一半（前提K为偶数）
void solve()
{
    scanf("%d%d", &N, &K);
    for (int i = 0; i < N; i++)
    {
        scanf("%d", &A[i]);
    }
    bool even = true;//判断K是奇数还是偶数
    if (K % 2)
    {
        even = false;
    }
    int res = 0;
    int zero = 0, half = 0;
    std::set<int> remain;
    for (int i = 0; i < N; i++)
    {
        int temp = A[i] % K;
        if (temp == 0) 
        {
            zero++;//统计是K的倍数的元素个数
        }
        else if (even && temp == K / 2)
        {
            half++;//统计模是K的一半的元素个数（前提K为偶数）
        }
        else
        {
            if (remain.find(K - temp) != remain.end())//如果能找到与该元素互补的数字
            {
                res = std::max(res, 2);//子数组的长度
            }
            remain.insert(temp);
        }
    }
    res = std::max(zero, std::max(res, half));
    if (res < 2)
    {
        res = -1;
    }
    printf("%d\n", res);
}

int main()
{
    solve();
    return 0;
}
