//#include<iostream>
//#include<vector>
//#include<string>
//#include<stack>
//#include<queue>
//#include<algorithm>
//using namespace std;
//void output(vector<int> T) {
//    cout << "所有的子数组为" << endl;
//    for (int i = 0; i < T.size(); i++) {
//        cout << T[i] << " ";
//
//    }cout << endl;
//}
//bool check(vector<int> A, int start, int end, int K) {
//    bool is = true;
//    for (int i = start; i <= end - 1; i++) {
//        for (int j = i + 1; j <= end; j++) {
//            if ((A[i] + A[j]) % K != 0) is = false;
//        }
//    }
//    return is;
//}
//int binarySearch(vector<int> A, int len, int x) {
//    int left = 0, right = len - 1, mid = (left + right) / 2;
//    while (left <= right) {
//        if (x > A[mid]) left = mid + 1;
//        else if (x < A[mid]) right = mid - 1;
//        else return mid;
//        mid = (left + right) / 2;
//    }
//    return left;
//}
//int maxsublen(vector<int> A, int N) {
//    vector<int> maxL(N, 0);
//    vector<int> mem(N, 0);
//    maxL[0] = A[0];
//    int len = 1;
//    for (int i = 1; i < N; i++) {
//        int j = binarySearch(maxL, len, A[i]);
//        maxL[j] = A[i];
//        mem[i] = j;
//        if (++j > len) len = j;
//    }
//    return len;
//}
//int main(void) {
//    //freopen("in.txt","r",stdin);
//    //freopen("out.txt","w",stdout);
//    int N;
//    cin >> N;
//    long long num = 0;
//    vector<int> A;
//    //num=(N-2)*9^(N-3) 但还需考虑6在其它位置出现只不过没有连续三个而已
//    if (N < 3) num = 0;
//    else if (N == 3) num = 1;
//    else if (N > 3) {
//        num = N - 2;
//        for (int i = 1; i <= N - 3; i++) {
//            num *= 9;
//        }
//    }
//
//
//    cout<< num% 1000000007;
//    return 0;
//}
#include <stdio.h>
#include <vector>
#include<iostream>
using namespace std;
long long mod = 1000000007;

void solve()
{
    int N;
    scanf("%d", &N);
    if (N < 3)
    {
        printf("%d\n", 0);
    }
    std::vector<std::vector<long long>> dp(N + 1, std::vector<long long>(3, 0));
    dp[0][0] = 0;
    dp[0][1] = 0;
    dp[0][2] = 1;
    for (int i = 1; i <= N; i++)
    {
        dp[i][0] = dp[i - 1][2];
        dp[i][1] = dp[i - 1][0];
        dp[i][2] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) * 9 % mod;
    }
    long long res = 0;
    for (int i = 0; i <= N - 3; i++)
    {
        res = (res + dp[i][2] * dp[N - i - 3][2]) % mod;
    }
    printf("%d\n", res);
}

int main()
{
    solve();
    return 0;
}
